.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Mitomaster::SpeciesRef 3"
.TH Bio::Mitomaster::SpeciesRef 3 "2012-03-05" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Mitomaster::SpeciesRef \- Reference object for species and ref sequence meta\-data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Bio::Mitomaster::SpeciesRef;
\&  $ref = Bio::Mitomaster::SpeciesRef\->new(species=>\*(Aqhuman\*(Aq, reference=>\*(AqrCRS\*(Aq);
\&  $ref = Bio::Mitomaster::SpeciesRef\->new();  #same thing
\&
\&  $amino_acid = $ref\->codon_code(\*(AqTTC\*(Aq);
\&  # $amino_acid is now F
\&  $amino_acid = $ref\->codon_code(\*(AqUUC\*(Aq);  
\&  # Same thing but with Uracil
\&
\&  print "The mtDNA reference seq is: ", $ref\->ref_seq();
\&  $transcript = $ref\->transcript($locus_id);  # Get the ND1 transcript
\&  $translation = $ref\->translation($locus_id); # Get the ND1 translation
\&  $locus_info = $ref\->locus(5);
\&  print $locus_info, \*(Aq begins at \*(Aq, $locus_info\->{start};  # Prints \*(AqMTTL1 begins at 3230\*(Aq
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "dna_wrapping =head2 rna_wrapping =head2 aa_wrapping"
.IX Subsection "dna_wrapping =head2 rna_wrapping =head2 aa_wrapping"
These attributes are used to indicate if position values wrap, i.e. the last moiety is a neighbor to the first.  Bio::Mitomaster was designed with support for circular molecules and setting these flag will cause the ending position to simply wrap back on the beginning.  Note that the molecule may still be linear.  Such would be the case if we had a partial human mtDNA sequences that began in the middle of the sequence and extended a little past the origin of replication.  That situation would warrant setting the wrapping value to 1, so that the seq would be treated as one continuous molecule.  Generally, this value is read from the species meta-data and we don't have to manipulate it directly.  The dna_wrapping attribute has an alias accessor called wrapping since that is the value that we normally want to manipulate.  The rna_wrapping and aa_wrapping were included for completeness and internal use by the software, but perhaps there is some unimagined scenario where a transcript or translation could be thought of as wrapping.
.SS "Constructor Attributes"
.IX Subsection "Constructor Attributes"
The reference and species are required for instantiation, but if you're studying human seqs, then the default values are probably okay.
.PP
\fIend\fR
.IX Subsection "end"
.PP
The last moiety position.  This value is contextual.  While it defaults to the last genome ref position, if the method is called by an RNASeq object (RNASeq delegates to this method), it will return the last position of the corresponding ref transcript.  Same goes for AASeq objects and translations.
.PP
\fIreference\fR
.IX Subsection "reference"
.PP
The reference sequence for the species.  Defaults to 'rCRS' (the human revised Cambridge sequence).
.ie n .SS "ref_seq =head2 ref_seq($position) =head2 ref_seq($start, $end)"
.el .SS "ref_seq =head2 ref_seq($position) =head2 ref_seq($start, \f(CW$end\fP)"
.IX Subsection "ref_seq =head2 ref_seq($position) =head2 ref_seq($start, $end)"
A string for the the \s-1MITOMAP\s0 reference sequence (the revised Cambridge sequence).  Note that the revised Cambridge sequence (rCRS) has a placeholder at position 3107, which is denoted by an 'N'.  Also note that the placeholder base is represented by an 'N'.
.PP
Returns a string representing the ref sequence value.  This is the same sequence provided by the contained SpeciesRef object, but enhanced with the Bio::Mitomaster::SeqManipRole and trimmed according to the start and end values of this particlar sequence object.  When called with indicies outside the declared start and end values of the sequence, an error is returned.
.PP
\fIspecies\fR
.IX Subsection "species"
.PP
The species from which the sequence is derived.  Defaults to 'human'.
.PP
\fIstart\fR
.IX Subsection "start"
.PP
The first nucleotide position.  Defaults to one.
.SS "codon_code"
.IX Subsection "codon_code"
The human mitochondrial translation code that maps codons to their amino acid.  Note that the mitochondrial code has some exceptions to the standard code.  There are key values for both thymine and uracil codes, so you can use either one.
.PP
.Vb 4
\& $r = Bio::Mitomaster::SpeciesRef\->new();
\& $c = $r\->codon_code(\*(AqTTT\*(Aq);  # $c is now \*(AqF\*(Aq
\& $c = $r\->codon_code(\*(AqUUU\*(Aq);  # same thing
\& $c = $r\->codon_code();  # $c is a hash reference to a codon lookup table
.Ve
.SS "locus"
.IX Subsection "locus"
The human mitochondrial locus regions.  Contains information for these regions.  Locus regions are indexed by ID# and name.
.PP
.Vb 4
\& $r = Bio::Mitomaster::SpeciesRef\->new();
\& $t = $r\->locus();  # $l is a hashref to a hash that contains all the locus hashrefs indexed by ID#
\& $l = $r\->locus(16);  # $l is a hashref for information about the Cytochrome oxidase subunit I locus
\& $s = $l\->{start};  # $s is 5903, the start for position for MTCO1
.Ve
.PP
Each locus hashref contains the keys: name, common_name, start, ending, strand, type, product.
.SS "protein"
.IX Subsection "protein"
The human mitochondrially encoded proteins.  Contains information for these.  Proteins are indexed by locus ID# and name.
 \f(CW$r\fR = Bio::Mitomaster::SpeciesRef\->\fInew()\fR;
 \f(CW$p\fR = \f(CW$r\fR\->protein(16);  # \f(CW$p\fR is a hashref for information about the Cytochrome oxidase subunit I
 \f(CW$p\fR = \f(CW$r\fR\->protein('\s-1COI\s0');  # same thing
 \f(CW$w\fR = \f(CW$p\fR\->{predicted_weight};  # \f(CW$w\fR is 57000, the molecular weight predicted for Cytochrome oxidase subunit I
 \f(CW$p\fR = \f(CW$r\fR\->\fIprotein()\fR;  # \f(CW$l\fR is a hashref to a hash that contains all the protein hashrefs indexed by locus ID#
Each protein hashref contains the keys:  id, predicted_weight, glycine_number, glycine_weight, urea_number, urea_weight, name, npid, and giid.
.SS "transcript"
.IX Subsection "transcript"
The human mitochondrial transcript sequences indexed by their locus \s-1ID\s0 value.  Values returned are the \s-1RNA\s0 strings that would be seen following transcription: compensation has been made for the strand on which the locus is encoded, uracil replaces thymine, and any poly-adenlyation.
.PP
.Vb 4
\& $r = Bio::Mitomaster::SpeciesRef\->new();
\& $t = $r\->transcript(16);  # $t contains the transcript string for the Cytochrome oxidase subunit I
\& $t = $r\->transcript(16,1,10);  # same thing but only the first 10 nucleotides
\& $t = $r\->transcript();  # $t is a hashref to a hash that contains all the mitochondrially encoded transcripts indexed by locus ID#
.Ve
.PP
The options for retrieving sub string values of a transcript is documented in the section Seq String Attributes.
.SS "translation"
.IX Subsection "translation"
The human mitochondrial translation sequences.  Values are the amino acid strings (\s-1IUPAC\s0 single-letter symbols) that would be seen following translation using the transcript strings returned by the transcript method.
.PP
.Vb 4
\&    $r = Bio::Mitomaster::SpeciesRef\->new();
\&    $t = $r\->translation(16);  # $t contains the translation string for the Cytochrome oxidase subunit I
\&    $t = $r\->translation(16,1,10);  # same thing but only the first 10 amino acids
\&    $t = $r\->translation();  # $t is a hashref to a hash that contains all the mitochondrially encoded translations indexed by locus ID#
.Ve
.PP
The options for retrieving sub string values of a translation is documented in the section Seq String Attributes.
.SH "METHODS"
.IX Header "METHODS"
.SS "wrapping"
.IX Subsection "wrapping"
Alias accessor/setter for the dna_wrapping attribute.  We define an alias since dna_wrapping is normally the value we want for wrapping.
.SH "AUTHOR"
.IX Header "AUTHOR"
Marty Brandon, \f(CW\*(C`<marty.brandon at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-bio\-mm\-refmitohuman at rt.cpan.org\*(C'\fR, or through
the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio\-Bio::Mitomaster\-RefMitoHuman <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Bio-Bio::Mitomaster-RefMitoHuman>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Bio::Mitomaster::SpeciesRef
.Ve
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio\-Bio::Mitomaster\-RefMitoHuman <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Bio-Bio::Mitomaster-RefMitoHuman>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
http://annocpan.org/dist/Bio\-Bio::Mitomaster\-RefMitoHuman <http://annocpan.org/dist/Bio-Bio::Mitomaster-RefMitoHuman>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
http://cpanratings.perl.org/d/Bio\-Bio::Mitomaster\-RefMitoHuman <http://cpanratings.perl.org/d/Bio-Bio::Mitomaster-RefMitoHuman>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
http://search.cpan.org/dist/Bio\-Bio::Mitomaster\-RefMitoHuman/ <http://search.cpan.org/dist/Bio-Bio::Mitomaster-RefMitoHuman/>
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Marty Brandon, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
